{
    "dashboards": [
        {
            "__Dashboard__": {
                "css": "",
                "dashboard_title": "Ruckus RTF-LABs",
                "description": null,
                "json_metadata": "{\"tenant_ids\": [\"0015000000GlI7SAAV\"], \"timed_refresh_immune_slices\": [], \"expanded_slices\": {}, \"refresh_frequency\": 0, \"default_filters\": \"{}\", \"color_scheme\": null, \"remote_id\": 3081, \"native_filter_configuration\": [], \"import_time\": 1661348672}",
                "position_json": "{\"CHART-4SLdXi_2aV\":{\"children\":[],\"id\":\"CHART-4SLdXi_2aV\",\"meta\":{\"chartId\":16152,\"height\":50,\"sliceName\":\"Avg RSS\",\"uuid\":\"814baf42-6262-47f7-b49a-00b097db4596\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-3kiVAtzls6\"],\"type\":\"CHART\"},\"CHART-92LcTeyjEV\":{\"children\":[],\"id\":\"CHART-92LcTeyjEV\",\"meta\":{\"chartId\":16149,\"height\":50,\"sliceName\":\"Top 10 Manufacturers by Client Count\",\"uuid\":\"6a8b1198-aef2-432a-8168-110820954467\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-l8H8Olhga4\"],\"type\":\"CHART\"},\"CHART-AlbSUyVgjr\":{\"children\":[],\"id\":\"CHART-AlbSUyVgjr\",\"meta\":{\"chartId\":16160,\"height\":56,\"sliceName\":\"Switch Report\",\"uuid\":\"94e07c2b-2727-494d-99d4-ae3e272ba791\",\"width\":12},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-H2qtDsd-GN\"],\"type\":\"CHART\"},\"CHART-DF8isF2njQ\":{\"children\":[],\"id\":\"CHART-DF8isF2njQ\",\"meta\":{\"chartId\":16153,\"height\":50,\"sliceName\":\"Guest Devices (Radio)\",\"uuid\":\"22cfe5eb-0b48-4481-8014-526828fcc8dc\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-xRtiZL6CEb\"],\"type\":\"CHART\"},\"CHART-EfQzeVzuqO\":{\"children\":[],\"id\":\"CHART-EfQzeVzuqO\",\"meta\":{\"chartId\":16154,\"height\":50,\"sliceName\":\"Top 10 Guest Applications\",\"uuid\":\"58f81ecf-7768-4061-b17f-32a60a88a730\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-l8H8Olhga4\"],\"type\":\"CHART\"},\"CHART-HUBBcVb1aw\":{\"children\":[],\"id\":\"CHART-HUBBcVb1aw\",\"meta\":{\"chartId\":16151,\"height\":50,\"sliceName\":\"Avg SNR\",\"uuid\":\"784c65c9-0cb6-46fc-b9f0-5af618453374\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-3kiVAtzls6\"],\"type\":\"CHART\"},\"CHART-Ih3WFMO3Qb\":{\"children\":[],\"id\":\"CHART-Ih3WFMO3Qb\",\"meta\":{\"chartId\":16155,\"height\":50,\"sliceName\":\"Client distribution vs AP Wi-Fi capability\",\"uuid\":\"b1b7d48a-2e73-47be-bbd9-62187d5acb22\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-xRtiZL6CEb\"],\"type\":\"CHART\"},\"CHART-MZZyMcvhCU\":{\"children\":[],\"id\":\"CHART-MZZyMcvhCU\",\"meta\":{\"chartId\":16148,\"height\":50,\"sliceName\":\"Top AP Models\",\"uuid\":\"f8333fc2-3d75-47e5-ae3d-5d1588ea28ca\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-l8H8Olhga4\"],\"type\":\"CHART\"},\"CHART-SMqp8PbLnE\":{\"children\":[],\"id\":\"CHART-SMqp8PbLnE\",\"meta\":{\"chartId\":16161,\"height\":50,\"sliceName\":\"Switch Count Trend\",\"uuid\":\"2fff04cf-8d63-4b42-9bd6-d18284a44648\",\"width\":8},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-eaEjuLR13s\"],\"type\":\"CHART\"},\"CHART-T6GdPsh8zw\":{\"children\":[],\"id\":\"CHART-T6GdPsh8zw\",\"meta\":{\"chartId\":16157,\"height\":50,\"sliceName\":\"Top Switches by Traffic\",\"uuid\":\"1ff1dd1a-78d2-44dc-b996-70d1779f5fdb\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-T3tjIHT35R\"],\"type\":\"CHART\"},\"CHART-b8wvk8DbTf\":{\"children\":[],\"id\":\"CHART-b8wvk8DbTf\",\"meta\":{\"chartId\":16162,\"height\":50,\"sliceName\":\"End-of-Life APs\",\"uuid\":\"d0d595af-4964-44a5-894b-d2ce671831f5\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-eaEjuLR13s\"],\"type\":\"CHART\"},\"CHART-eYulxBf43q\":{\"children\":[],\"id\":\"CHART-eYulxBf43q\",\"meta\":{\"chartId\":16156,\"height\":50,\"sliceName\":\"Avg Airtime Utilization\",\"uuid\":\"1393b317-b007-439a-9357-ca310583823c\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-3kiVAtzls6\"],\"type\":\"CHART\"},\"CHART-hLPkSN3gs8\":{\"children\":[],\"id\":\"CHART-hLPkSN3gs8\",\"meta\":{\"chartId\":16150,\"height\":50,\"sliceName\":\"Traffic\",\"uuid\":\"9980ac3b-9820-4cc9-b4b3-c06fbd66aeb4\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-xRtiZL6CEb\"],\"type\":\"CHART\"},\"CHART-ks59TNkKA9\":{\"children\":[],\"id\":\"CHART-ks59TNkKA9\",\"meta\":{\"chartId\":16158,\"height\":50,\"sliceName\":\"Top Switches by PoE Usage\",\"uuid\":\"d1f9fa55-fc48-428c-b870-10904398e05e\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-T3tjIHT35R\"],\"type\":\"CHART\"},\"CHART-vhmqHGxaoM\":{\"children\":[],\"id\":\"CHART-vhmqHGxaoM\",\"meta\":{\"chartId\":16159,\"height\":50,\"sliceName\":\"Top Switches by Errors\",\"uuid\":\"3ae26122-5586-4cd3-8089-fe2f12d482b1\",\"width\":4},\"parents\":[\"ROOT_ID\",\"GRID_ID\",\"ROW-T3tjIHT35R\"],\"type\":\"CHART\"},\"DASHBOARD_VERSION_KEY\":\"v2\",\"GRID_ID\":{\"children\":[\"ROW-l8H8Olhga4\",\"ROW-3kiVAtzls6\",\"ROW-xRtiZL6CEb\",\"ROW-eaEjuLR13s\",\"ROW-H2qtDsd-GN\",\"ROW-T3tjIHT35R\"],\"id\":\"GRID_ID\",\"parents\":[\"ROOT_ID\"],\"type\":\"GRID\"},\"HEADER_ID\":{\"id\":\"HEADER_ID\",\"meta\":{\"text\":\"Ruckus RTF-Dubai Event\"},\"type\":\"HEADER\"},\"ROOT_ID\":{\"children\":[\"GRID_ID\"],\"id\":\"ROOT_ID\",\"type\":\"ROOT\"},\"ROW-3kiVAtzls6\":{\"children\":[\"CHART-4SLdXi_2aV\",\"CHART-eYulxBf43q\",\"CHART-HUBBcVb1aw\"],\"id\":\"ROW-3kiVAtzls6\",\"meta\":{\"background\":\"BACKGROUND_TRANSPARENT\"},\"parents\":[\"ROOT_ID\",\"GRID_ID\"],\"type\":\"ROW\"},\"ROW-H2qtDsd-GN\":{\"children\":[\"CHART-AlbSUyVgjr\"],\"id\":\"ROW-H2qtDsd-GN\",\"meta\":{\"background\":\"BACKGROUND_TRANSPARENT\"},\"parents\":[\"ROOT_ID\",\"GRID_ID\"],\"type\":\"ROW\"},\"ROW-T3tjIHT35R\":{\"children\":[\"CHART-ks59TNkKA9\",\"CHART-T6GdPsh8zw\",\"CHART-vhmqHGxaoM\"],\"id\":\"ROW-T3tjIHT35R\",\"meta\":{\"background\":\"BACKGROUND_TRANSPARENT\"},\"parents\":[\"ROOT_ID\",\"GRID_ID\"],\"type\":\"ROW\"},\"ROW-eaEjuLR13s\":{\"children\":[\"CHART-SMqp8PbLnE\",\"CHART-b8wvk8DbTf\"],\"id\":\"ROW-eaEjuLR13s\",\"meta\":{\"background\":\"BACKGROUND_TRANSPARENT\"},\"parents\":[\"ROOT_ID\",\"GRID_ID\"],\"type\":\"ROW\"},\"ROW-l8H8Olhga4\":{\"children\":[\"CHART-92LcTeyjEV\",\"CHART-MZZyMcvhCU\",\"CHART-EfQzeVzuqO\"],\"id\":\"ROW-l8H8Olhga4\",\"meta\":{\"background\":\"BACKGROUND_TRANSPARENT\"},\"parents\":[\"ROOT_ID\",\"GRID_ID\"],\"type\":\"ROW\"},\"ROW-xRtiZL6CEb\":{\"children\":[\"CHART-hLPkSN3gs8\",\"CHART-DF8isF2njQ\",\"CHART-Ih3WFMO3Qb\"],\"id\":\"ROW-xRtiZL6CEb\",\"meta\":{\"background\":\"BACKGROUND_TRANSPARENT\"},\"parents\":[\"ROOT_ID\",\"GRID_ID\"],\"type\":\"ROW\"}}",
                "slices": [
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.apInventory",
                            "datasource_type": "table",
                            "id": 16148,
                            "params": "{\"adhoc_filters\": [], \"all_columns\": [], \"color_pn\": true, \"column_config\": {\"%AP Count\": {\"horizontalAlign\": \"left\"}, \"AP Count\": {\"horizontalAlign\": \"left\"}}, \"conditional_formatting\": [], \"datasource\": \"12__table\", \"extra_form_data\": {}, \"granularity_sqla\": \"__time\", \"groupby\": [\"apModel\"], \"include_search\": true, \"metrics\": [\"AP Count\"], \"order_by_cols\": [], \"order_desc\": true, \"percent_metrics\": [\"AP Count\"], \"query_mode\": \"aggregate\", \"row_limit\": 10, \"server_page_length\": 10, \"server_pagination\": true, \"show_cell_bars\": true, \"slice_id\": 2005, \"table_timestamp_format\": \"smart_date\", \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_grain_sqla\": \"PT15M\", \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {}, \"viz_type\": \"table\", \"remote_id\": 16148, \"datasource_name\": \"apInventory\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 15, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_grain_sqla\": \"PT15M\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"apModel\"], \"metrics\": [\"AP Count\"], \"orderby\": [[\"AP Count\", false]], \"annotation_layers\": [], \"row_limit\": 10, \"row_offset\": 0, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {}, \"custom_params\": {}, \"custom_form_data\": {}, \"post_processing\": [{\"operation\": \"contribution\", \"options\": {\"columns\": [\"AP Count\"], \"rename_columns\": [\"%AP Count\"]}}]}, {\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_grain_sqla\": \"PT15M\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"apModel\"], \"metrics\": [\"AP Count\"], \"orderby\": [[\"AP Count\", false]], \"annotation_layers\": [], \"row_limit\": 0, \"row_offset\": 0, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {}, \"custom_params\": {}, \"custom_form_data\": {}, \"post_processing\": [], \"is_rowcount\": true}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Top AP Models",
                            "viz_type": "table"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.binnedSessions",
                            "datasource_type": "table",
                            "id": 16149,
                            "params": "{\"adhoc_filters\": [{\"clause\": \"WHERE\", \"comparator\": \"Unknown\", \"expressionType\": \"SIMPLE\", \"filterOptionName\": \"filter_c032xdbwlw_kz3l8onsb7c\", \"isExtra\": false, \"isNew\": false, \"operator\": \"!=\", \"operatorId\": \"NOT_EQUALS\", \"sqlExpression\": null, \"subject\": \"manufacturer\"}], \"color_scheme\": \"supersetColors\", \"datasource\": \"14__table\", \"date_format\": \"smart_date\", \"donut\": true, \"extra_form_data\": {}, \"granularity_sqla\": \"__time\", \"groupby\": [\"manufacturer\"], \"innerRadius\": 30, \"label_line\": true, \"label_type\": \"key\", \"labels_outside\": true, \"legendOrientation\": \"top\", \"legendType\": \"scroll\", \"metric\": \"Unique Client MAC Count\", \"number_format\": \"SMART_NUMBER\", \"outerRadius\": 44, \"row_limit\": 10, \"show_labels\": true, \"show_labels_threshold\": \"\", \"slice_id\": 3453, \"sort_by_metric\": true, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {\"native_filters\": \"()\"}, \"viz_type\": \"pie\", \"remote_id\": 16149, \"datasource_name\": \"binnedSessions\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 10, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [{\"col\": \"manufacturer\", \"op\": \"!=\", \"val\": \"Unknown\"}], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"manufacturer\"], \"metrics\": [\"Unique Client MAC Count\"], \"orderby\": [[\"Unique Client MAC Count\", false]], \"annotation_layers\": [], \"row_limit\": 10, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {\"native_filters\": \"()\"}, \"custom_params\": {}, \"custom_form_data\": {}}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Top 10 Manufacturers by Client Count",
                            "viz_type": "pie"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.binnedSessions",
                            "datasource_type": "table",
                            "id": 16150,
                            "params": "{\"limit\": 100, \"schema\": \"druid\", \"groupby\": [], \"metrics\": [\"User Traffic (Total)\", \"User Traffic (Downlink)\", \"User Traffic (Uplink)\"], \"opacity\": 0.2, \"viz_type\": \"echarts_area\", \"remote_id\": 16150, \"row_limit\": 500, \"datasource\": \"7__table\", \"legendType\": \"scroll\", \"markerSize\": 6, \"order_desc\": true, \"seriesType\": \"line\", \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"url_params\": {}, \"import_time\": 1661348672, \"show_legend\": true, \"color_scheme\": \"supersetColors\", \"label_colors\": {}, \"rich_tooltip\": true, \"adhoc_filters\": [], \"database_name\": \"Apache Druid\", \"truncateYAxis\": true, \"y_axis_bounds\": [null, null], \"y_axis_format\": \"SMART_BINARY_NUMBER\", \"comparison_type\": \"values\", \"datasource_name\": \"binnedSessions\", \"extra_form_data\": {}, \"forecastPeriods\": 10, \"time_grain_sqla\": \"PT1H\", \"forecastInterval\": 0.8, \"granularity_sqla\": \"__time\", \"annotation_layers\": [], \"legendOrientation\": \"top\", \"tooltipTimeFormat\": \"smart_date\", \"x_axis_time_format\": \"smart_date\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"]}",
                            "query_context": "{\"datasource\": {\"id\": 10, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_grain_sqla\": \"PT1H\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [], \"metrics\": [\"User Traffic (Total)\", \"User Traffic (Downlink)\", \"User Traffic (Uplink)\"], \"orderby\": [[\"User Traffic (Total)\", false]], \"annotation_layers\": [], \"row_limit\": 500, \"timeseries_limit\": 100, \"order_desc\": true, \"url_params\": {}, \"custom_params\": {}, \"custom_form_data\": {}, \"is_timeseries\": true, \"time_offsets\": [], \"post_processing\": [null, null, null, {\"operation\": \"pivot\", \"options\": {\"index\": [\"__timestamp\"], \"columns\": [], \"aggregates\": {\"User Traffic (Total)\": {\"operator\": \"mean\"}, \"User Traffic (Downlink)\": {\"operator\": \"mean\"}, \"User Traffic (Uplink)\": {\"operator\": \"mean\"}}, \"drop_missing_columns\": false}}, null, null]}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Traffic",
                            "viz_type": "echarts_area"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.binnedSessions",
                            "datasource_type": "table",
                            "id": 16151,
                            "params": "{\"adhoc_filters\": [{\"clause\": \"WHERE\", \"comparator\": \"2.4\", \"expressionType\": \"SIMPLE\", \"filterOptionName\": \"filter_pbipktezxra_vz9kjicn5a\", \"isExtra\": false, \"isNew\": false, \"operator\": \"==\", \"operatorId\": \"EQUALS\", \"sqlExpression\": null, \"subject\": \"radio\"}], \"animation\": true, \"color_scheme\": \"d3Category20b\", \"datasource\": \"14__table\", \"end_angle\": -45, \"extra_form_data\": {}, \"font_size\": 15, \"granularity_sqla\": \"__time\", \"groupby\": [], \"max_val\": 100, \"metric\": \"Avg SNR\", \"min_val\": \"0\", \"number_format\": \"SMART_NUMBER\", \"overlap\": true, \"row_limit\": 10, \"show_pointer\": true, \"show_progress\": true, \"slice_id\": 1030, \"split_number\": 10, \"start_angle\": 225, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {}, \"value_formatter\": \"{value} dB\", \"viz_type\": \"gauge_chart\", \"remote_id\": 16151, \"datasource_name\": \"binnedSessions\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 10, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [{\"col\": \"radio\", \"op\": \"==\", \"val\": \"2.4\"}], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [], \"metrics\": [\"Avg SNR\"], \"annotation_layers\": [], \"row_limit\": 10, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {}, \"custom_params\": {}, \"custom_form_data\": {}, \"groupby\": []}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Avg SNR",
                            "viz_type": "gauge_chart"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.binnedSessions",
                            "datasource_type": "table",
                            "id": 16152,
                            "params": "{\"adhoc_filters\": [], \"animation\": true, \"color_scheme\": \"d3Category20b\", \"datasource\": \"14__table\", \"end_angle\": -45, \"extra_form_data\": {}, \"font_size\": 15, \"granularity_sqla\": \"__time\", \"groupby\": [], \"max_val\": 0, \"metric\": \"Avg RSS\", \"min_val\": -100, \"number_format\": \"SMART_NUMBER\", \"overlap\": true, \"row_limit\": 10, \"show_pointer\": true, \"show_progress\": true, \"slice_id\": 1034, \"split_number\": 10, \"start_angle\": 225, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {\"native_filters\": \"()\"}, \"value_formatter\": \"{value} dBm\", \"viz_type\": \"gauge_chart\", \"remote_id\": 16152, \"datasource_name\": \"binnedSessions\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 10, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [], \"metrics\": [\"Avg RSS\"], \"annotation_layers\": [], \"row_limit\": 10, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {\"native_filters\": \"()\"}, \"custom_params\": {}, \"custom_form_data\": {}, \"groupby\": []}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Avg RSS",
                            "viz_type": "gauge_chart"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.binnedSessions",
                            "datasource_type": "table",
                            "id": 16153,
                            "params": "{\"adhoc_filters\": [], \"bottom_margin\": \"auto\", \"color_scheme\": \"d3Category20b\", \"columns\": [], \"datasource\": \"14__table\", \"extra_form_data\": {}, \"granularity_sqla\": \"__time\", \"groupby\": [\"radioMode\"], \"label_colors\": {}, \"metrics\": [\"Unique Client MAC Count\"], \"order_desc\": true, \"row_limit\": 10, \"show_bar_value\": true, \"show_legend\": false, \"slice_id\": 1884, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {\"native_filters\": \"()\"}, \"viz_type\": \"dist_bar\", \"x_ticks_layout\": \"auto\", \"y_axis_bounds\": [null, null], \"y_axis_format\": \"SMART_NUMBER\", \"y_axis_label\": \"No of guest devices\", \"remote_id\": 16153, \"datasource_name\": \"binnedSessions\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 10, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"radioMode\"], \"metrics\": [\"Unique Client MAC Count\"], \"annotation_layers\": [], \"row_limit\": 10, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {\"native_filters\": \"()\"}, \"custom_params\": {}, \"custom_form_data\": {}}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Guest Devices (Radio)",
                            "viz_type": "dist_bar"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.binnedAvc",
                            "datasource_type": "table",
                            "id": 16154,
                            "params": "{\"adhoc_filters\": [{\"clause\": \"WHERE\", \"comparator\": \"Unknown\", \"expressionType\": \"SIMPLE\", \"filterOptionName\": \"filter_zem6u67seg_oe74behaqi\", \"isExtra\": false, \"isNew\": false, \"operator\": \"!=\", \"operatorId\": \"NOT_EQUALS\", \"sqlExpression\": null, \"subject\": \"app\"}], \"color_scheme\": \"d3Category20b\", \"datasource\": \"7__table\", \"date_format\": \"smart_date\", \"donut\": true, \"extra_form_data\": {}, \"granularity_sqla\": \"__time\", \"groupby\": [\"app\"], \"innerRadius\": 35, \"label_line\": true, \"label_type\": \"key_value\", \"labels_outside\": true, \"legendOrientation\": \"top\", \"legendType\": \"scroll\", \"metric\": \"Traffic (Total)\", \"number_format\": \"SMART_BINARY_NUMBER\", \"outerRadius\": 55, \"row_limit\": 10, \"show_labels\": true, \"show_labels_threshold\": \"\", \"show_legend\": false, \"slice_id\": 1886, \"sort_by_metric\": true, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {\"native_filters\": \"()\"}, \"viz_type\": \"pie\", \"remote_id\": 16154, \"datasource_name\": \"binnedAvc\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 5, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [{\"col\": \"app\", \"op\": \"!=\", \"val\": \"Unknown\"}], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"app\"], \"metrics\": [\"Traffic (Total)\"], \"orderby\": [[\"Traffic (Total)\", false]], \"annotation_layers\": [], \"row_limit\": 10, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {\"native_filters\": \"()\"}, \"custom_params\": {}, \"custom_form_data\": {}}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Top 10 Guest Applications",
                            "viz_type": "pie"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.binnedSessions",
                            "datasource_type": "table",
                            "id": 16155,
                            "params": "{\"adhoc_filters\": [], \"all_columns_x\": \"AP WiFi Capability\", \"all_columns_y\": \"Client Capability\", \"bottom_margin\": \"auto\", \"canvas_image_rendering\": \"pixelated\", \"datasource\": \"14__table\", \"extra_form_data\": {}, \"granularity_sqla\": \"__time\", \"left_margin\": \"auto\", \"linear_color_scheme\": \"schemeBlues\", \"metric\": \"Unique Client MAC Count\", \"normalize_across\": \"heatmap\", \"normalized\": true, \"row_limit\": 5000, \"show_legend\": true, \"show_perc\": false, \"show_values\": true, \"slice_id\": 1736, \"sort_x_axis\": \"alpha_asc\", \"sort_y_axis\": \"alpha_asc\", \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {\"native_filters\": \"(NATIVE_FILTER-lTqSQR9VQ:(extraFormData:(),filterState:(),id:NATIVE_FILTER-lTqSQR9VQ,ownState:()))\"}, \"viz_type\": \"heatmap\", \"xscale_interval\": null, \"y_axis_bounds\": [null, null], \"y_axis_format\": \"SMART_NUMBER\", \"yscale_interval\": null, \"remote_id\": 16155, \"datasource_name\": \"binnedSessions\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 10, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [], \"metrics\": [\"Unique Client MAC Count\"], \"annotation_layers\": [], \"row_limit\": 5000, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {\"native_filters\": \"(NATIVE_FILTER-lTqSQR9VQ:(extraFormData:(),filterState:(),id:NATIVE_FILTER-lTqSQR9VQ,ownState:()))\"}, \"custom_params\": {}, \"custom_form_data\": {}}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Client distribution vs AP Wi-Fi capability",
                            "viz_type": "heatmap"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.binnedRadio",
                            "datasource_type": "table",
                            "id": 16156,
                            "params": "{\"adhoc_filters\": [{\"clause\": \"WHERE\", \"comparator\": \"5\", \"expressionType\": \"SIMPLE\", \"filterOptionName\": \"filter_y6spsp9nb6p_be7zegnnv3n\", \"isExtra\": false, \"isNew\": false, \"operator\": \"==\", \"operatorId\": \"EQUALS\", \"sqlExpression\": null, \"subject\": \"radio\"}], \"animation\": true, \"color_scheme\": \"supersetColors\", \"datasource\": \"10__table\", \"end_angle\": -45, \"extra_form_data\": {}, \"font_size\": 11, \"granularity_sqla\": \"__time\", \"groupby\": [], \"max_val\": 1, \"metric\": \"Avg Airtime Utilization\", \"min_val\": \"0\", \"number_format\": \",.1%\", \"overlap\": true, \"row_limit\": 10, \"show_pointer\": true, \"show_progress\": true, \"slice_id\": 1026, \"split_number\": 10, \"start_angle\": 225, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {\"native_filters\": \"()\"}, \"value_formatter\": \"{value}\", \"viz_type\": \"gauge_chart\", \"remote_id\": 16156, \"datasource_name\": \"binnedRadio\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 4, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [{\"col\": \"radio\", \"op\": \"==\", \"val\": \"5\"}], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [], \"metrics\": [\"Avg Airtime Utilization\"], \"annotation_layers\": [], \"row_limit\": 10, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {\"native_filters\": \"()\"}, \"custom_params\": {}, \"custom_form_data\": {}, \"groupby\": []}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Avg Airtime Utilization",
                            "viz_type": "gauge_chart"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.switchNetwork",
                            "datasource_type": "table",
                            "id": 16157,
                            "params": "{\"adhoc_filters\": [], \"color_scheme\": \"supersetColors\", \"datasource\": \"2__table\", \"date_format\": \"smart_date\", \"donut\": true, \"extra_form_data\": {}, \"granularity_sqla\": \"__time\", \"groupby\": [\"switchId\", \"switchName\"], \"innerRadius\": 30, \"label_line\": true, \"label_type\": \"key\", \"labels_outside\": true, \"legendOrientation\": \"top\", \"legendType\": \"scroll\", \"metric\": \"Traffic (Total)\", \"number_format\": \"SMART_BINARY_NUMBER\", \"outerRadius\": 47, \"row_limit\": 10, \"show_labels\": true, \"show_labels_threshold\": \"\", \"slice_id\": 173, \"sort_by_metric\": true, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {\"native_filters\": \"()\"}, \"viz_type\": \"pie\", \"remote_id\": 16157, \"datasource_name\": \"switchNetwork\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 6, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"switchId\", \"switchName\"], \"metrics\": [\"Traffic (Total)\"], \"orderby\": [[\"Traffic (Total)\", false]], \"annotation_layers\": [], \"row_limit\": 10, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {\"native_filters\": \"()\"}, \"custom_params\": {}, \"custom_form_data\": {}}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Top Switches by Traffic",
                            "viz_type": "pie"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.switchInventory",
                            "datasource_type": "table",
                            "id": 16158,
                            "params": "{\"adhoc_filters\": [], \"color_scheme\": \"supersetColors\", \"datasource\": \"3__table\", \"date_format\": \"smart_date\", \"donut\": true, \"extra_form_data\": {}, \"granularity_sqla\": \"__time\", \"groupby\": [\"switchId\", \"switchName\"], \"innerRadius\": 30, \"label_line\": true, \"label_type\": \"key\", \"labels_outside\": true, \"legendOrientation\": \"top\", \"legendType\": \"scroll\", \"metric\": \"PoE Usage (mW)\", \"number_format\": \"SMART_NUMBER\", \"outerRadius\": 45, \"row_limit\": 10, \"show_labels\": true, \"show_labels_threshold\": \"\", \"slice_id\": 176, \"sort_by_metric\": true, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {}, \"viz_type\": \"pie\", \"remote_id\": 16158, \"datasource_name\": \"switchInventory\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 14, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"switchId\", \"switchName\"], \"metrics\": [\"PoE Usage (mW)\"], \"orderby\": [[\"PoE Usage (mW)\", false]], \"annotation_layers\": [], \"row_limit\": 10, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {}, \"custom_params\": {}, \"custom_form_data\": {}}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Top Switches by PoE Usage",
                            "viz_type": "pie"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.switchNetwork",
                            "datasource_type": "table",
                            "id": 16159,
                            "params": "{\"adhoc_filters\": [], \"annotation_layers\": [], \"color_scheme\": \"supersetColors\", \"comparison_type\": \"values\", \"datasource\": \"2__table\", \"extra_form_data\": {}, \"forecastInterval\": 0.8, \"forecastPeriods\": 10, \"granularity_sqla\": \"__time\", \"groupby\": [\"switchName\"], \"label_colors\": {}, \"legendOrientation\": \"bottom\", \"legendType\": \"scroll\", \"limit\": 5, \"markerSize\": 6, \"metrics\": [{\"aggregate\": null, \"column\": null, \"expressionType\": \"SQL\", \"hasCustomLabel\": true, \"isNew\": false, \"label\": \"Total Errors\", \"optionName\": \"metric_cglkug6v03r_ahulwispp9s\", \"sqlExpression\": \"SUM(inErr) + SUM(outErr)\"}], \"order_desc\": true, \"rich_tooltip\": true, \"row_limit\": 500, \"show_legend\": true, \"slice_id\": 2023, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_grain_sqla\": \"PT1H\", \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"tooltipTimeFormat\": \"smart_date\", \"truncateYAxis\": true, \"url_params\": {}, \"viz_type\": \"echarts_timeseries_line\", \"x_axis_time_format\": \"smart_date\", \"y_axis_bounds\": [null, null], \"y_axis_format\": \"SMART_NUMBER\", \"remote_id\": 16159, \"datasource_name\": \"switchNetwork\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 6, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_grain_sqla\": \"PT1H\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"switchName\"], \"metrics\": [{\"aggregate\": null, \"column\": null, \"expressionType\": \"SQL\", \"hasCustomLabel\": true, \"isNew\": false, \"label\": \"Total Errors\", \"optionName\": \"metric_cglkug6v03r_ahulwispp9s\", \"sqlExpression\": \"SUM(inErr) + SUM(outErr)\"}], \"orderby\": [[{\"aggregate\": null, \"column\": null, \"expressionType\": \"SQL\", \"hasCustomLabel\": true, \"isNew\": false, \"label\": \"Total Errors\", \"optionName\": \"metric_cglkug6v03r_ahulwispp9s\", \"sqlExpression\": \"SUM(inErr) + SUM(outErr)\"}, false]], \"annotation_layers\": [], \"row_limit\": 500, \"timeseries_limit\": 5, \"order_desc\": true, \"url_params\": {}, \"custom_params\": {}, \"custom_form_data\": {}, \"is_timeseries\": true, \"time_offsets\": [], \"post_processing\": [null, null, null, {\"operation\": \"pivot\", \"options\": {\"index\": [\"__timestamp\"], \"columns\": [\"switchName\"], \"aggregates\": {\"Total Errors\": {\"operator\": \"mean\"}}, \"drop_missing_columns\": false}}, null, null]}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Top Switches by Errors",
                            "viz_type": "echarts_timeseries_line"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.switchNetwork",
                            "datasource_type": "table",
                            "id": 16160,
                            "params": "{\"adhoc_filters\": [], \"bar_stacked\": true, \"bottom_margin\": 150, \"color_scheme\": \"bnbColors\", \"columns\": [\"portSpeed\"], \"datasource\": \"2__table\", \"extra_form_data\": {}, \"granularity_sqla\": \"__time\", \"groupby\": [\"switchModel\"], \"label_colors\": {}, \"metrics\": [\"Traffic (Total)\"], \"order_desc\": true, \"reduce_x_ticks\": false, \"row_limit\": 50000, \"show_bar_value\": true, \"show_legend\": true, \"slice_id\": 2027, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {\"native_filters\": \"()\"}, \"viz_type\": \"dist_bar\", \"x_ticks_layout\": \"auto\", \"y_axis_bounds\": [null, null], \"y_axis_format\": \"SMART_BINARY_NUMBER\", \"y_axis_label\": \"Total traffic\", \"y_axis_showminmax\": false, \"remote_id\": 16160, \"datasource_name\": \"switchNetwork\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 6, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"switchModel\", \"portSpeed\"], \"metrics\": [\"Traffic (Total)\"], \"annotation_layers\": [], \"row_limit\": 50000, \"timeseries_limit\": 0, \"order_desc\": true, \"url_params\": {\"native_filters\": \"()\"}, \"custom_params\": {}, \"custom_form_data\": {}}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Switch Report",
                            "viz_type": "dist_bar"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.switchInventory",
                            "datasource_type": "table",
                            "id": 16161,
                            "params": "{\"adhoc_filters\": [], \"annotation_layers\": [], \"color_scheme\": \"supersetColors\", \"comparison_type\": \"values\", \"datasource\": \"3__table\", \"extra_form_data\": {}, \"forecastInterval\": 0.8, \"forecastPeriods\": 10, \"granularity_sqla\": \"__time\", \"groupby\": [\"switchStatus\"], \"label_colors\": {}, \"legendOrientation\": \"top\", \"legendType\": \"scroll\", \"limit\": 5, \"markerSize\": 6, \"metrics\": [\"Switch Count\"], \"order_desc\": true, \"rich_tooltip\": true, \"row_limit\": 500, \"show_legend\": true, \"slice_id\": 1941, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_grain_sqla\": \"PT15M\", \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"tooltipTimeFormat\": \"smart_date\", \"truncateYAxis\": true, \"url_params\": {\"native_filters\": \"()\"}, \"viz_type\": \"echarts_timeseries_line\", \"x_axis_time_format\": \"smart_date\", \"y_axis_bounds\": [null, null], \"y_axis_format\": \"SMART_NUMBER\", \"remote_id\": 16161, \"datasource_name\": \"switchInventory\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 14, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [], \"extras\": {\"time_grain_sqla\": \"PT15M\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"switchStatus\"], \"metrics\": [\"Switch Count\"], \"orderby\": [[\"Switch Count\", false]], \"annotation_layers\": [], \"row_limit\": 500, \"timeseries_limit\": 5, \"order_desc\": true, \"url_params\": {\"native_filters\": \"()\"}, \"custom_params\": {}, \"custom_form_data\": {}, \"is_timeseries\": true, \"time_offsets\": [], \"post_processing\": [null, null, null, {\"operation\": \"pivot\", \"options\": {\"index\": [\"__timestamp\"], \"columns\": [\"switchStatus\"], \"aggregates\": {\"Switch Count\": {\"operator\": \"mean\"}}, \"drop_missing_columns\": false}}, null, null]}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "Switch Count Trend",
                            "viz_type": "echarts_timeseries_line"
                        }
                    },
                    {
                        "__Slice__": {
                            "cache_timeout": null,
                            "datasource_name": "druid.apInventory",
                            "datasource_type": "table",
                            "id": 16162,
                            "params": "{\"adhoc_filters\": [{\"clause\": \"WHERE\", \"comparator\": \"Unknown\", \"expressionType\": \"SIMPLE\", \"filterOptionName\": \"filter_qqbnolofo1k_jcjzg6kba4\", \"isExtra\": false, \"isNew\": false, \"operator\": \"!=\", \"operatorId\": \"NOT_EQUALS\", \"sqlExpression\": null, \"subject\": \"zoneName\"}, {\"clause\": \"WHERE\", \"comparator\": [\"R700\"], \"expressionType\": \"SIMPLE\", \"filterOptionName\": \"filter_rg3zen3qqb_57tsvtkz8sr\", \"isExtra\": false, \"isNew\": false, \"operator\": \"IN\", \"operatorId\": \"IN\", \"sqlExpression\": null, \"subject\": \"apModel\"}], \"aggregateFunction\": \"Sum\", \"colOrder\": \"key_a_to_z\", \"datasource\": \"12__table\", \"date_format\": \"smart_date\", \"extra_form_data\": {}, \"granularity_sqla\": \"__time\", \"groupbyColumns\": [], \"groupbyRows\": [\"zoneName\", \"apModel\"], \"metrics\": [\"AP Count\"], \"metricsLayout\": \"COLUMNS\", \"order_desc\": true, \"rowOrder\": \"key_a_to_z\", \"row_limit\": 10, \"slice_id\": 730, \"tenant_ids\": [\"0015000000GlI7SAAV\"], \"time_grain_sqla\": \"PT1H\", \"time_range\": \"Last day\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"url_params\": {}, \"valueFormat\": \"SMART_NUMBER\", \"viz_type\": \"pivot_table_v2\", \"remote_id\": 16162, \"datasource_name\": \"apInventory\", \"schema\": \"druid\", \"database_name\": \"Apache Druid\", \"import_time\": 1661348672}",
                            "query_context": "{\"datasource\": {\"id\": 15, \"type\": \"table\"}, \"force\": false, \"queries\": [{\"time_range\": \"Last day\", \"granularity\": \"__time\", \"filters\": [{\"col\": \"zoneName\", \"op\": \"!=\", \"val\": \"Unknown\"}, {\"col\": \"apModel\", \"op\": \"IN\", \"val\": [\"R700\"]}], \"extras\": {\"time_grain_sqla\": \"PT1H\", \"time_range_endpoints\": [\"inclusive\", \"exclusive\"], \"having\": \"\", \"having_druid\": [], \"where\": \"\"}, \"applied_time_extras\": {}, \"columns\": [\"zoneName\", \"apModel\"], \"metrics\": [\"AP Count\"], \"annotation_layers\": [], \"row_limit\": 10, \"timeseries_limit\": 0, \"url_params\": {}, \"custom_params\": {}, \"custom_form_data\": {}, \"orderby\": [[\"AP Count\", false]]}], \"result_format\": \"json\", \"result_type\": \"full\"}",
                            "slice_name": "End-of-Life APs",
                            "viz_type": "pivot_table_v2"
                        }
                    }
                ],
                "slug": null
            }
        }
    ],
    "datasources": []
}